#!/bin/sh

# Use neovim for vim if present.
[ -x "$(command -v nvim)" ] && alias vim="nvim" vimdiff="nvim -d"

# Use $XINITRC variable if file exists.
[ -f "$XINITRC" ] && alias startx="startx $XINITRC"

# sudo not required for some system commands
for command in mount umount su poweroff reboot zzz nixrb; do
	alias $command="sudo $command"
done; unset command

# Verbosity and settings that you pretty much just always are going to want.
alias \
	rb="systemctl reboot" \
	cp="cp -iv" \
	de="sudo nvim" \
	mv="mv -iv" \
	rm="rm -vI" \
	bc="bc -ql" \
	py="python" \
	mkd="mkdir -pv" \
	yt="youtube-dl --add-metadata -i" \
	yta="yt-dlp -x --audio-format m4a" \
	yv="ytfzf -t" \
	t="tmux" \
	ta="tmux a" \
	ffmpeg="ffmpeg -hide_banner" \
	cls="clear; eza" \
	clera="clear"

# Colorize commands when possible.
alias \
	ls="eza --icons --git  --group-directories-first" \
	cat="bat" \
	xw="setbg" \
	lsa="ls -a" \
	lsl="ls -l" \
	lsla="ls -la" \
	grep="grep --color=auto" \
	ccat="highlight --out-format=ansi"
	# diff="diff --color=auto" \

# These common commands are just too long! Abbreviate them.
alias \
	ka="killall -9" \
	fp="devour mpv" \
	x="nsxiv -t -g 1500x700 ." \
	zj="zellij" \
	za="zellij a" \
	zjp="zellij --layout ~/.config/zellij/layouts/jp_layout.kdl" \
	smci="sudo make clean install" \
	smi="sudo make install" \
	mi="make install" \
	smcu="sudo make clean uninstall" \
	smu="sudo make uninstall" \
	mi="make install" \
	cx="chmod +x"

alias \
	g="git" \
	gs="git status" \
	trem="transmission-remote" \
	YT="youtube-viewer" \
	sdn="shutdown -h now" \
	qb="qutebrowser" \
	v="$EDITOR" \
	xr="sudo xbps-remove -R" \
	xq="xbps-query" \
	z="zathura" \
	pipes="pipes.sh" \
	arcom="arduino-cli compile --fqbn arduino:avr:uno" \
	tex="tectonic -Z shell-escape"
	arup="arduino-cli upload -p /dev/ttyUSB0 --fqbn arduino:avr:uno"

# scratch
alias \
	scs="scratch search" \
	scvp="cd /var/cache/scratchpkg/packages/" \
	rrp="cd ~/.local/src/ports/" 

# xchroot to manage venom ports
alias \
	cr="sudo xchroot /mnt/venom-dev zsh" \
	cvu="for pkg in gopass swaylock-effects chezmoi ; do ../scripts/outdate.sh /home/javier/Venom/main/$pkg ; done"

# Directories
alias \
	tm="cd /tmp" \
	ds="cd ~/.dotfiles" \
	uds="update_dots && hyprctl notify 5 5000 'rgb(458588)' 'fontsize:15  Dotfiles updated correctly'" \
	dof="yazi ~/.dotfiles" \
	n="nnn -e" \
	mu='yt-dlp "$(ytfzf -D -I L "$1")" -o - | ffplay - -nodisp -autoexit -loglevel quiet' \
	ytb='yt-dlp -f b "$(ytfzf -D -I L "$1")" -o - | ffplay - -autoexit -loglevel quiet'


ecf(){ find ~/.dotfiles/.config  -type f,l -printf "%h/%f\n" | fzf --prompt="Edit config file: " | xargs -r nvim }
esc(){ find ~/.dotfiles/.local/bin  -type f,l -printf "%h/%f\n" | fzf --prompt="Edit script file: " | xargs -r nvim }

gap() {
    # Check if the current directory is a Git repository
    if [ ! -d ".git" ]; then
        echo "Not a Git repository."
        return 1
    fi

    # Fetch the latest changes from the remote repository
    git fetch

    # Check if there are any differences between the local and remote branches
    local LOCAL=$(git rev-parse @)
    local REMOTE=$(git rev-parse @{u})
    local BASE=$(git merge-base @ @{u})

    if [ "$LOCAL" = "$REMOTE" ]; then
        echo "The local repository is up to date."
    elif [ "$LOCAL" = "$BASE" ]; then
        echo "Changes detected, pulling updates..."
        git pull
    elif [ "$REMOTE" = "$BASE" ]; then
        echo "You have local changes that need to be pushed."
    else
        echo "The local and remote repositories have diverged."
    fi
}

y() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")"
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		builtin cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}
